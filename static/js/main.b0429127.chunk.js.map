{"version":3,"sources":["serviceWorker.js","components/card.js","components/cardList.js","components/searchBox.js","components/scroll.js","components/errorBoundary.js","containers/app.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","borderTop","height","children","ErrorBoundary","state","hasError","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACxB,OACC,yBAAKC,UAAU,mDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,cACpB,6BACC,4BAAKC,GACL,2BAAIC,MCcOI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCEhBU,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKV,UAAU,OACb,2BACEA,UAAU,8BACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCHI,G,MARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,UAAW,kBAAmBC,OAAQ,UACrEJ,EAAMK,YCiBEC,E,kDAnBb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAU,GAHA,E,gEAQZC,KAAKC,SAAS,CAACF,UAAU,M,+BAIzB,OAAIC,KAAKF,MAAMC,SACN,wDAEFC,KAAKT,MAAMK,a,GAhBMM,aCiDbC,E,kDA3Cb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKV,MAAQ,CACXlB,OAAQ,GACR0B,YAAa,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKZ,SAAS,CAACrB,OAAQiC,S,+BAO/B,IAAD,EACuBb,KAAKF,MAA5BlB,EADA,EACAA,OAAQ0B,EADR,EACQA,YACTQ,EAAiBd,KAAKF,MAAMlB,OAAOmC,QAAO,SAAAC,GAC9C,OACEA,EAAM1C,KAAK2C,cAAcC,SAASZ,EAAYW,gBAC9CD,EAAMzC,MAAM0C,cAAcC,SAASZ,EAAYW,kBAKnD,OAAQrC,EAAOuC,OAEb,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcc,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUxB,OAAQkC,OAPF,wBAAItC,UAAU,MAAd,kB,GA7BV0B,aCAlBkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b0429127.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({id, name, email}) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow shadow-5'>\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react'\nimport Card from './card'\n\nconst CardList = ({robots}) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card \n              key={i} \n              id={robots[i].id} \n              name={robots[i].name} \n              email={robots[i].email}\n            />\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa2 tc ba bw2 b--light-blue' \n        type='search' \n        placeholder='search robots'\n        onChange={searchChange}\n        />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', borderTop: '1px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch() {\n    this.setState({hasError: true})\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong....</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport CardList from '../components/cardList';\nimport SearchBox from '../components/searchBox';\nimport './app.css';\nimport Scroll from '../components/scroll';\nimport ErrorBoundary from '../components/errorBoundary.js'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchField: '',\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response =>response.json())\n    .then(users => {this.setState({robots: users})})\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchField: event.target.value})\n  }\n\n  render() {\n    const {robots, searchField} = this.state;\n    const filteredRobots = this.state.robots.filter(robot => {\n      return (\n        robot.name.toLowerCase().includes(searchField.toLowerCase()) ||\n        robot.email.toLowerCase().includes(searchField.toLowerCase())\n      ) \n            \n    })\n  \n    return !robots.length ? <h1 className='tc'>Loading...</h1> :\n    (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots}/>\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/app.js';\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}